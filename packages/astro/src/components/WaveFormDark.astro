---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"svg">;

const { id, class: className, ...rest } = Astro.props;

function randomBetween(min: number, max: number, seed = 1) {
  return () => {
    let rand = Math.sin(seed++) * 10000;
    rand = rand - Math.floor(rand);
    return Math.floor(rand * (max - min + 1) + min);
  };
}

const bars = {
  total: 100,
  width: 2,
  gap: 2,
  minHeight: 40,
  maxHeight: 100,
};

const barHeights = Array.from(
  { length: bars.total },
  randomBetween(bars.minHeight, bars.maxHeight)
);
---

<svg aria-hidden="true" id={id} class={className} {...rest}>
  <defs>
    <linearGradient id={`${id}-fade`} x1="0" x2="0" y1="0" y2="1">
      <stop offset="40%" stop-color="white"></stop>
      <stop offset="100%" stop-color="black"></stop>
    </linearGradient>
    <linearGradient id={`${id}-gradient`}>
      <stop offset="0%" stop-color="oklch(78.5% 0.115 274.713)"></stop>
      <stop offset="50%" stop-color="oklch(80.9% 0.105 251.813)"></stop>
      <stop offset="100%" stop-color="oklch(84.5% 0.143 164.978)"></stop>
    </linearGradient>
    <mask id={`${id}-mask`}>
      <rect width="100%" height="100%" fill={`url(#${id}-pattern)`}></rect>
    </mask>
    <pattern
      id={`${id}-pattern`}
      width={bars.total * bars.width + bars.total * bars.gap}
      height="100%"
      patternUnits="userSpaceOnUse"
    >
      {
        Array.from({ length: bars.total }, (_, index) => (
          <rect
            width={bars.width}
            height={`${barHeights[index]}%`}
            x={bars.gap * (index + 1) + bars.width * index}
            fill={`url(#${id}-fade)`}
          />
        ))
      }
    </pattern>
  </defs>
  <rect
    width="100%"
    height="100%"
    fill={`url(#${id}-gradient)`}
    mask={`url(#${id}-mask)`}
    opacity="0.6"></rect>
</svg>
