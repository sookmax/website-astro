---
import { cn } from "@website/shared/utils";

type Props = {
  class?: string;
};

const { class: className } = Astro.props;
---

<scroll-progress-bar
  class={cn(
    "block w-full h-0.5 bg-slate-100 dark:bg-slate-700 overflow-hidden",
    className
  )}
>
  <div
    class="progress-bar h-full bg-pink-400 dark:bg-pink-300 scale-x-0 origin-left transition-transform duration-75 ease-out will-change-transform"
  >
  </div>
</scroll-progress-bar>

<script>
  class ScrollProgressBar extends HTMLElement {
    connectedCallback() {
      const progressBar = this.querySelector(".progress-bar");
      if (progressBar) {
        let requested = false;
        const updateProgress = () => {
          if (!requested) {
            requestAnimationFrame(() => {
              const scrollTop = document.documentElement.scrollTop;
              const docHeight =
                document.documentElement.scrollHeight -
                (window.visualViewport?.height ??
                  document.documentElement.clientHeight);
              const progress = scrollTop / docHeight;
              (progressBar as HTMLElement).style.scale = `${progress} 1`;
              (progressBar as HTMLElement).dataset.progress =
                progress.toString();
              requested = false;
            });
          }
        };

        window.addEventListener("scroll", updateProgress);
        window.addEventListener("resize", updateProgress);
        updateProgress(); // Initial call to set the progress bar on load
      }
    }
  }
  customElements.define("scroll-progress-bar", ScrollProgressBar);
</script>
